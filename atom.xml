<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Carlos Nascimento]]></title>
    <link href="https://carloscdf.github.io/carlos/atom.xml" rel="self"/>
    <link href="https://carloscdf.github.io/carlos/"/>
    <updated>2023-10-28T22:31:11+00:00</updated>
    <id>https://carloscdf.github.io/carlos/</id>
            <author>
            <name><![CDATA[Carlos Nascimento]]></name>            <email><![CDATA[henrique.duplex@hotmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[A Journey into the Tech World: My Introduction, Passion for Web Development, and About this Blog]]></title>
            <link href="https://carloscdf.github.io/carlos/article/a-journey-into-the-tech-world-my-introduction-passion-for-web-development-and-about-this-blog/"/>
            <updated>2023-10-28T22:31:11+00:00</updated>
            <id>https://carloscdf.github.io/carlos/article/a-journey-into-the-tech-world-my-introduction-passion-for-web-development-and-about-this-blog/</id>
            <content type="html"><![CDATA[<p>Hello, world. Well, this is my first official post here. I'm just testing to check if everything is right. So let's get started.</p>

<p>First, I want to introduce myself and summarize how I entered the tech world.</p>

<h2 id="about-me-and-how-i-entered-the-tech-world.">About me and how I entered the Tech world.</h2>

<p>I'm Carlos Nascimento, and I live in Bahia, Brazil. I started in the tech world when I was very young. I learned a lot because I have always been a curious person.</p>

<p><strong>When I was 16 years old, I was accepted at IFBA (Bahia Federal Institute of Education, Science, and Technology) in Jequié City</strong>. However, I didn't study in person for a long time because the COVID-19 pandemic came, and the world stopped. It was at that time that I decided to study web development by taking the <strong>"Desenhista de Produtos Gráficos Web"</strong> course offered by IFBA during the pandemic.</p>

<p>When I completed the course, I realized how powerful and magical web development is. <strong>So, I decided to search and learn more about it</strong>. This was the first step towards everything that was going to come in the future.</p>

<p>I'm also a <strong>Graphic Designer</strong> but it's more like a hobby to me.</p>

<p>I worked on some projects during this process, as you can see on my <a href="https://github.com/carloscdf">GitHub</a>, but unfortunately, I didn't post all of them there.</p>

<p>It has been three years, and here I am. Currently, I'm totally in love with web development, I learned a lot during the pandemic such as <strong>HTML, CSS, JavaScript, and PHP.</strong> I'm excited to learn more and more, but now starting with <strong>Python</strong>. I want to dive into the river of <strong>Artificial Intelligence</strong> and do amazing projects. <strong>This is my life goal and what I'm focused on</strong>.</p>

<p>I'm 18 years old now, still studying web development at IFBA and at home as well, and I'm almost done with my secondary education with a technical specialization this year. I'm excited about what the future holds for me.</p>

<p>Okay... so let's talk about this blog.</p>

<h2 id="about-the-blog.">About the blog.</h2>

<p>I created this blog to share everything I know, a little about my life, and experiences I've been through, and the ones that are yet to come. Here, I will post tutorials about a lot of things. The focus is on programming, but not on a specific language because <strong>I want to talk about all of them</strong>. We will also work on some projects. I want this blog to be a fountain of knowledge and helpful to all of you, and I will do my best to make that happen.</p>

<p>I apologize for my bad English. I'm not an expert, and that's why I will do posts in English and in my native language that is Portuguese.</p>

<p>Welcome, and let's get to work.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Guia Completo: Instalação, Configuração do Git e Criação do Primeiro Repositório no GitHub (Windows e Linux)]]></title>
            <link href="https://carloscdf.github.io/carlos/article/guia-completo-instalacao-configuracao-do-git-e-criacao-do-primeiro-repositorio-no-github-windows-e-linux/"/>
            <updated>2023-10-28T22:31:11+00:00</updated>
            <id>https://carloscdf.github.io/carlos/article/guia-completo-instalacao-configuracao-do-git-e-criacao-do-primeiro-repositorio-no-github-windows-e-linux/</id>
            <content type="html"><![CDATA[<p>Às vezes, sempre tenho que pesquisar o passo a passo da instalação e configuração do Git. No entanto, os resultados muitas vezes são confusos e não ajudam. Acabo tendo que buscar informações de várias fontes diferentes. Por isso, decidi reunir aqui as informações completas e, talvez, simplificadas, para que nem eu e nem você precise mais realizar essa busca.</p>

<p>Antes de começarmos, aqui está uma breve explicação sobre ambos. É importante destacar que o Git e o GitHub são duas coisas diferentes, e isso pode confundir algumas pessoas.</p>

<blockquote>
  <p>O Git é um sistema de controle de versão gratuito e de código aberto projetado para lidar com projetos de todos os tamanhos de forma rápida e eficiente, de pequenos a muito grandes. <a href="https://git-scm.com/about">Saiba mais.</a></p>
  
  <p>O GitHub, por outro lado, é uma plataforma online de hospedagem e colaboração de projetos que usa o Git como base.  É um local onde você pode armazenar seus projetos em repositórios e disponibilizá-los para outras pessoas baixarem. Esse recurso é especialmente útil ao trabalhar em equipe e permitir que vários desenvolvedores colaborem no mesmo projeto. O GitHub é uma espécie de "rede social" para compartilhar e colaborar em códigos-fonte. Semelhante ao Twitter, mas focado em projetos de desenvolvimento. <a href="https://docs.github.com/pt/get-started/quickstart/hello-world">Saiba mais.</a></p>
</blockquote>

<p>Agora que você entendeu a diferença entre os dois, vamos iniciar o processo de instalação e configuração.</p>

<h2 id="instalando-o-git-no-windows-ou-linux">Instalando o GIT no Windows ou Linux</h2>

<p>A seguir, apresentamos dois métodos de instalação do Git. Se você estiver utilizando o Linux, siga a opção 1. Caso esteja utilizando o Windows, siga a opção 2.</p>

<blockquote>
  <ol>
  <li>Você pode baixar o Git para <strong>Linux Debian</strong> através deste comando:<br> <code>sudo apt install git</code></li>
  <li>Você pode baixar o instalador do Git para <strong>Windows</strong> através <a href="https://git-scm.com/download/wine">deste link</a>.</li>
  </ol>
</blockquote>

<p>Após baixar o Git no sistema operacional de sua preferência, siga as seguintes etapas:</p>

<ol>
<li><strong>Primeira tela:</strong> Mostra os termos de uso do Git, pressione <strong>Next></strong></li>
<li><strong>Segunda tela:</strong> Mostra o local em que o Git será instalado, recomendo deixar no padrão <code>C:\Program Files\Git</code>.</li>
<li><strong>Terceira tela:</strong> Mostra a parte de selecionar componentes, recomendo que deixe todos marcados, caso não queira deixar um ícone na área de trabalho <strong>desmarque apenas a opção chamada</strong> <code>Additional icons</code>.</li>
<li><strong>Quarta tela:</strong> Mostra que o Git irá criar uma pasta no menu iniciar, marque <code>Don't create a Start Menu folder</code> na parte inferior da janela caso não queira.</li>
<li><strong>Quinta tela:</strong> Mostra qual editor de texto/terminal que você irá usar para fazer os comandos Git, eu utilizo o <code>vim (the ubiquitous text editor) as git default editor</code> porque ja me adaptei, mas você pode usar o de sua preferência.</li>
</ol>

<p>Agora, começam as principais dúvidas relacionadas à instalação do Git, mas não se preocupe, vou detalhar cada uma delas.</p>

<ol start="6">
<li><strong>Sexta tela:</strong> Mostra se queremos usar os comandos do Git com as seguintes opções:

<ul>
<li><code>Use Git from Git Bash only</code>. Essa é a opção mais segura, pois não modificará a variável de ambiente PATH do seu sistema. Dessa forma, você poderá acessar as ferramentas de linha de comando do Git apenas pelo Git Bash.</li>
<li><code>Use Git from the Windows Command Prompt</code>. Essa opção irá modificar a variável de ambiente PATH do seu sistema e irá incluir o caminho do arquivo git.exe nela.</li>
<li><code>Use Git and optional Unix tools from the Windows Command Prompt</code>. Essa opção faz praticamente o mesmo que a segunda opção, mas também adiciona os utilitários Unix que trazem consigo alguns comandos do Linux, como por exemplo, o ls e muitos outros.
Escolha a opção que mais lhe agrada e prossiga para a próxima etapa.</li>
</ul></li>
<li><strong>Sétima tela:</strong> Mostra qual biblioteca de validação de chaves de segurança queremos.

<ul>
<li><code>Use the OpenSSL library</code>. Essa opção é a recomendada e amplamente utilizada pois o OpenSSL é compatível com várias outras plataformas.</li>
<li><code>Use the native Windows Secure Channel library</code>. Essa opção é uma solução integrada e confiável do Windows, pois utiliza a biblioteca nativa chamada Secure Channel.
Escolha a opção que mais lhe agrada e prossiga para a próxima etapa.</li>
</ul></li>
<li><strong>Oitava tela:</strong> Mostra como queremos a conversão de final de linha, pois o Windows e o Unix lidam com isso de maneiras diferentes. Não vou me aprofundar muito no assunto, mas eu pessoalmente uso e recomendo a opção <code>Checkout Windows-style, commit Unix-style line endings</code></li>
<li><strong>Nona tela:</strong> Mostra qual emulador de terminal queremos usar para o Git Bash. Eu uso e recomendo a opção <code>Use MinTTY (the default terminal of MSYS2)</code>.</li>
<li><strong>Décima tela:</strong> A penúltima tela mostra quais configurações extras queremos. Recomendo deixar padrão, mas você pode selecionar as opções que achar melhor.</li>
<li><strong>Décima primeira tela:</strong> A última tela (FINALMENTE!) mostra as configurações experimentais. Também não vou me aprofundar em cada uma, mas recomendo que você mantenha as opções padrão. No entanto, você pode escolher as configurações que considerar melhor.</li>
</ol>

<p>A instalação está concluída. Para verificar se tudo está instalado corretamente, procure Git Bash na pasta aplicativos do seu sistema. Se você o encontrar, significa que você tem o Git instalado. Outra opção é usar o comando <code>git --version</code> em qualquer terminal. Isso retornará a versão atual do Git instalada em seu dispositivo. Agora você já pode usar o Git, mas primeiro gostaria de mostrar algumas configurações necessárias para que ele funcione corretamente. </p>

<h2 id="configurando-o-git-e-preparando-o-para-o-github%3A-configura%C3%A7%C3%B5es-de-usu%C3%A1rio-e-chave-ssh">Configurando o Git e preparando-o para o GitHub: Configurações de usuário e chave SSH</h2>

<p>Após a instalação, você precisará abrir o Git Bash e realizar as configurações de usuário. Aqui estão os comandos necessários: <code>git config --global user.name "SEU_USERNAME"</code> e <code>git config --global user.email "SEU_E-MAIL"</code>. Lembre-se de substituir <code>"SEU_USERNAME"</code> e <code>"SEU_E-MAIL"</code> por nome de usuário e e-mail que você utilize.</p>

<p>A próxima etapa é gerar a <strong>chave SSH</strong> e adicioná-la ao GitHub. Essa etapa é necessária e, dependendo de como você lida com isso, pode ser um pouco complicada de entender.</p>

<h4 id="como-criar-uma-chave-ssh-no-windows-ou-linux">Como criar uma chave SSH no Windows ou Linux</h4>

<p>Como <strong>Git Bash</strong> aberto, siga as seguintes instruções:</p>

<ol>
<li>Cole no prompt do Git Bash o comando <code>$ ssh-keygen -t ed25519 -C "SEU_EMAIL@EXEMPLO.COM"</code>
para criar uma nova chave SSH. Atenção, substitua o <code>SEU_EMAIL@EXEMPLO.COM</code> pelo e-mail que está associado a sua conta do GitHub. Feito isso, o Git Bash exibirá as seguintes mensagem:</li>
</ol>

<ul>
<li><strong>Windows</strong></li>
</ul>

<pre>> Generating public/private ALGORITHM key pair.Enter 
> Enter a file in which to save the key (/c/Users/YOU/.ssh/id_ALGORITHM):[Press enter]
</pre>

<p>Aqui está indicando onde a chave será salva, o caminho padrão. Recomendo que não faça modificações e pressione <strong>Enter</strong>.</p>

<ul>
<li><strong>Linux</strong></li>
</ul>

<pre>> Generating public/private ALGORITHM key pair.Enter 
> Enter a file in which to save the key (/home/YOU/.ssh/ALGORITHM):[Press enter]
</pre>

<p>A criação da chave SSH no Linux é semelhante ao Windows, com a diferença de que o local padrão de armazenamento das chaves SSH no Linux é diferente. Recomendo que não faça modificações e pressione <strong>Enter</strong>.</p>

<ol start="2">
<li>Agora será solicitado que você digite uma "frase secreta", mas você também pode digitar uma senha, desde que se lembre dela, pois será solicitada toda vez que fizer um pull ou push para o GitHub. É o que eu faço. O prompt pedirá para você colocar a "frase secreta" duas vezes.</li>
</ol>

<pre>> Enter passphrase (empty for no passphrase): [Type a passphrase]
> Enter same passphrase again: [Type passphrase again]</pre>

<p><img src="https://lh5.googleusercontent.com/cmIqxzDOEzuHMS2KD9jOAYpLmiJV0LpX-2qlehJIkwh9hGSGtupnKJM3U1BqZC1bd4qbNc8k9e9_ASdUfuMxTRsEbUK9gXpEypt_6K7mHIlv9QLnjOpyppOkw8TmOS95reQKiqqu" alt="SSH Image" />
<small>Créditos: https://hcode.com.br</small></p>

<p>A mensagem na imagem acima mostra que a chave SSH foi gerada com sucesso. Foram geradas duas chaves: <code>id_ed25519.pub</code> e <code>id_ed25519</code>, sendo a primeira a chave pública. Vamos ensinar a você como adicionar as informações desta chave à sua conta do GitHub. A segunda chave é a chave privada, que você deverá adicionar ao ssh-agent conforme explicarei a seguir.</p>

<h4 id="adicionando-a-chave-ssh-ao-ssh-agent-no-windows-ou-linux">Adicionando a chave SSH ao ssh-agent no Windows ou Linux</h4>

<p>O ssh-agent é um gerenciador de chaves SSH que armazena com segurança chaves privadas usadas para autenticação remota por SSH. Isso permite que você armazene sua chave privada em um local seguro sem precisar digitar a senha da chave toda vez que interagir com o servidor remoto. O ssh-agent simplifica o processo de autenticação. Para por em prática siga as etapas:</p>

<ol>
<li>O comando a seguir inicia o ssh-agent:</li>
</ol>

<pre>eval $(ssh-agent -s)</pre>

<p>O Git Bash retornará a mensagem <code>&gt; Agent pid 59566</code>.</p>

<ol start="2">
<li>Agora vamos adicionar a chave privada ao ssh-agent com o seguinte comando:</li>
</ol>

<pre>$ ssh-add ~/.ssh/id_ed25519</pre>

<p>Com o ssh-agent iniciado, agora podemos prosseguir com a adição da chave SSH no GitHub e a criação do primeiro repositório.</p>

<h2 id="adicionando-a-chave-ssh-criada-%C3%A0-sua-conta-do-github">Adicionando a chave SSH criada à sua conta do GitHub</h2>

<p>Para adicionar uma chave SSH e criar um repositório, você precisa criar uma conta GitHub. Após a criação, siga estas etapas:</p>

<ol>
<li>Após a criação da chave SSH, você precisa acessar o conteúdo dela, que está dentro do arquivo <code>id_ed25519.pub</code>, que é a chave pública. Para fazer isso, você deve digitar o seguinte comando no Git Bash:</li>
</ol>

<ul>
<li>Windows</li>
</ul>

<pre>$ clip < ~/.ssh/id_ed25519.pub</pre>

<ul>
<li>Linux</li>
</ul>

<pre>$ cat ~/.ssh/id_ed25519.pub</pre>

<p>Esse comando copia as informações contidas na chave SSH pública para que possam ser posteriormente coladas no GitHub.</p>

<ol start="2">
<li>No <strong>canto superior direito</strong> de qualquer página, estará a sua foto de perfil. Após clicar nela, uma barra lateral se expandirá e mostrará as seguintes opções: 
<img src="https://i.ibb.co/23bm3DK/image.png" style="width: 200px !important; margin-top: 15px;"></li>
</ol>

<p>Clique em <strong>Settings</strong>.</p>

<ol start="3">
<li>Estando na aba de configurações clique em <strong>SSH and GPG Keys</strong>.</li>
</ol>

<p><img src="https://i.ibb.co/9NTs19M/image2.png" style="width: 200px !important; margin-top: 15px;"></p>

<ol start="4">
<li>Aqui estarão listadas todas as suas chaves SSH. Para adicionar uma nova chave, clique no botão verde escrito <strong>New SSH Key</strong>.</li>
</ol>

<p><img src="https://i.ibb.co/KXBgCT6/image3.png" style="margin-top: 15px;"></p>

<ol start="5">
<li>Aqui você irá atribuir um nome à sua chave na seção 'Title' e colar as informações que foram copiadas anteriormente do prompt do Git Bash na seção 'Key'. Deixe a opção de autenticação como 'Authentication Key' e, com as informações devidamente preenchidas, clique em <strong>Add SSH Key</strong>.
<img src="https://i.ibb.co/7bL9YXT/imag4.png" style="margin-top: 15px;"></li>
</ol>

<p>Pronto, concluímos todas as configurações necessárias para o funcionamento do Git e GitHub em seu dispositivo. Agora, vou te ensinar como criar o seu primeiro repositório.</p>

<h2 id="criando-o-primeiro-reposit%C3%B3rio-no-github-e-fazendo-o-primeiro-push">Criando o primeiro repositório no GitHub e fazendo o primeiro push</h2>

<p>Para criar um repositório no GitHub, você precisa acessar a sua conta e clicar no botão <strong>'+'</strong>, localizado no canto superior direito da página, em seguida, selecionar <strong>'New repository'</strong>. Em seguida, será exibida a tela a seguir:</p>

<p><img src="https://i.ibb.co/fdVHBZM/01.png" alt="Image" /></p>

<p>Preencha as informações do seu repositório e clique em <strong>'Create repository'</strong>. Será exibida essa tela:</p>

<p><img src="https://i.ibb.co/pwzHRsD/02.png" alt="Image" /></p>

<p>Vamos utilizar apenas os comandos da seção <code>…or push an existing repository from the command line</code>.</p>

<p>Após a criação do repositório, abra o Git Bash na pasta raiz onde estão os arquivos do seu projeto que você deseja armazenar no GitHub e digite <code>git init</code>. Em seguida, digite os seguintes comandos:</p>

<pre>$ git add *
$ git comit -m "DESCRIÇÃO DAS ALTERAÇÕES EM SEU PROJETO"
</pre>

<p>Agora, vamos utilizar os comandos fornecidos na seção mencionada:</p>

<pre>git remote add origin git@github.com:carloscdf/test.git
git branch -M main
git push -u origin main</pre>

<p>Após pressionar Enter na última linha de comando, você será solicitado a fornecer a <strong>"frase secreta" (senha)</strong> que foi cadastrada anteriormente. Digite-a e pressione <strong>Enter</strong> novamente. 
Pronto, o seu projeto será armazenado no GitHub. Volte para a tela do GitHub onde mostra o seu repositório e atualize a página. Se tudo ocorreu conforme esperado, o código fonte do seu projeto será exibido.</p>

<p>Caso não tenha entendido os comandos mencionados anteriormente, aqui está uma tabela com links que explicam cada um e suas funções:</p>

<table>
<thead>
<tr>
  <th>Comando</th>
  <th>Descrição</th>
</tr>
</thead>
<tbody>
<tr>
  <td>git add</td>
  <td>Adiciona alterações para serem incluídas no próximo commit.</td>
</tr>
<tr>
  <td>git commit</td>
  <td>Registra as alterações feitas no repositório.</td>
</tr>
<tr>
  <td>git remote add</td>
  <td>Adiciona um repositório remoto ao qual você pode enviar as alterações.</td>
</tr>
<tr>
  <td>git branch</td>
  <td>Cria, lista ou exclui branches (ramificações) no repositório.</td>
</tr>
<tr>
  <td>git push</td>
  <td>Envia as alterações para um repositório remoto.</td>
</tr>
<tr>
  <td>git pull</td>
  <td>Obtém as atualizações mais recentes de um repositório remoto e mescla com o repositório local.</td>
</tr>
<tr>
  <td>git clone</td>
  <td>Cria uma cópia local de um repositório remoto.</td>
</tr>
</tbody>
</table>

<p><br>
A documentação oficial do Git fornece informações detalhadas sobre todos os comandos e funcionalidades do Git. Recomendo consultar essa documentação para obter um entendimento completo e aprofundado sobre o uso do Git. <a href="https://git-scm.com/doc">Link da documentação</a>.</p>

<h2 id="conclus%C3%A3o">Conclusão</h2>

<p>Este artigo apresentou um guia abrangente e simplificado, reunindo informações essenciais para a instalação, configuração e uso do Git e GitHub, visando facilitar o processo nos sistemas operacionais Windows e Linux. Lembrando que há outros métodos, talves eu possa aborda-los em um futuro artigo.</p>
]]></content>
        </entry>
    </feed>
